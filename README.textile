h1. Blacklight Access Controls

Provides access controls for Blacklight-based applications.

*Background*:  Much of this code was extracted from "hydra-access-controls":https://github.com/projecthydra/hydra-head/tree/master/hydra-access-controls


h2. Adding Access Controls to a Blacklight App

h3. Install the gem

* Add blacklight-access_controls to your Gemfile
* bundle install

h3. Configure solr

* Make sure your solrconfig.xml has a requestHandler for "permissions".  For an example, see solr_conf/conf/solrconfig.xml.

* If you use solr field names that don't match the default field names used in Blacklight::AccessControls::Config for the "permissions" handler, you'll need to create a Rails initializer to set those values in Blacklight::AccessControls::Config.

h3. Run the generator

<pre>
rails generate blacklight:access_controls
</pre>

h3. Implement user.groups

* If you are using LDAP or some other way of controlling group-level access to records, implement a 'groups' method on your User model.  If you call user.groups method on a user, it should return a list of groups that the user belongs to.


h2. Using Access Controls

Some notes about using blacklight-access_controls within your Blacklight app:

* You can grant access to a record to specific users or groups by adding them to the correct fields in the solr document.  For example:

<pre>
  {
    discover_access_group_ssim: "public",
    read_access_person_ssim: "bilbo@example.com",
    download_access_person_ssim: "frodo@example.com"
  }
</pre>

* The gem expects user.groups to return a list of groups that the user belongs to.  By default, all users belong to a group called "public", and all logged-in users belong to a group called "registered".

* If you want a record to be readable by the public, you need to add "public" to the "read_access_group_ssim" field in the solr document, or if you want discover-only access, add "public" to "discover_access_group_ssim".  (Discover-only means that the user can see that the record exists in a catalog search, but won't be able to view the record itself.)

* If you grant download access to a user or group, blacklight-access_controls will grant access only to the SolrDocument (or the ID of the SolrDocument).  If you want the user to be able to download a different type of object such as an attached file, you may need to add that permission into your cancan abilities.  In this example, we check the permissions of the user id for the object itself, instead of for the SolrDocument that indexes the object:

<pre>
  can :download, AttachedFile, parent: { user_id: user.id }
</pre>

* If you want to test download access against the solr document instead of against the object (for example, to decide whether or not to display a download link on an index or show page), then you can just add a normal cancan check in your controller or view.  There is no need to add anything special to the cancan ability class.

<pre>
  if can? :download, solr_document
    # do something
  end
</pre>


h2. Developer Notes

This section contains information about working on the blacklight-access_controls gem itself.

h3. Set up Solr

<pre>
$ bundle exec rake solr:clean
$ bundle exec rake solr:config
$ bundle exec rake solr:start
$ bundle exec rake solr:stop
</pre>

h3. Generate a Rails test app

<pre>
$ bundle exec rake engine_cart:clean
$ bundle exec rake engine_cart:generate
</pre>

h3. Run the test suite

<pre>
$ bundle exec rake engine_cart:clean
$ bundle exec rake engine_cart:generate
$ bundle exec rake solr:spec
</pre>

h3. Run the Rails server in development mode

<pre>
$ bundle exec rake solr:start
$ bundle exec rake engine_cart:generate
$ bundle exec rake engine_cart:server
</pre>

